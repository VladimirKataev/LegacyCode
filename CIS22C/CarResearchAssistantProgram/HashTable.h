// Written by Brandon Le
#pragma once
#include <iostream>
#include <string>
#include "Car.h"
#include "LinkedNode.h"

template <class Car>
class HashTable {
private:
	LinkedNode<Car*>** table;
	int size, numEntries, collisions;

	/* Generates the index from a model name
	pre: keystr - a string representing the manufacturere and model type
	post: none
	return: integer key between 0 and 50
	*/
	int hash(std::string keystr);

	/* Resolves collisions when inserting a Car into the Hash Table
	pre: key - the key generated by hash function
		 insert - a pointer to a SingularLinkNode<Car*> object to be inserted in
	post: SingularLinkNode<Car*> object will be inserted in using Link List collision resolution
	return: none
	*/
	void collisionResolution(int key, LinkedNode<Car*>* insert);

public:
	/* Default Constructor
	pre: none
	post: sets the table to an array of Car pointers of size 50, sets size to 50, and HashTable is created.
	return: none
	*/
	HashTable(int sizeHash);

	/* Destructor
	pre: none
	post: deletes every entry in table and deletes the Hash Table
	return: none
	*/
	~HashTable();

	/* Inserts a Car into the Hash Table
	 pre: insert - a pointer to a Car object to be inserted
	 post: Car object is inserted into the Hash Table
	 return: none
	*/
	void insert(Car*);

	/* Inserts a Car into the Hash Table
	pre: insert - a pointer to a LinkNode object with Car pointer data to insert
	post: Car object is inserted into the Hash Table
	return: none
	*/
	void insert(LinkedNode<Car*>* insertCar);

	/* Removes a Car from the Hash Table
	pre: deleteCar - car to be deleted
	post: a Car is deleted
	return: true or false if a Car was deleted
	*/
	bool remove(LinkedNode<Car*> deleteCar);

	/* Searches for the first Car with the same ... as key
	pre: key - a string that contains ...
	post: none
	return: the details of the first Car with the same ... as key
	*/
	Car search(std::string key);

	/* Returns the size of the Hash Table
	pre: none
	post: none
	return: size
	*/
	int getSize() const;

	/* Returns the number of entries inside the Hash Table
	pre: none
	post: none
	return: numEntries
	*/
	int getNumEntries() const;

	/* Deletes every entry from the Hash Table
	pre: none
	post: every Car is deleted
	return: none
	*/
	void clear();

	/* Gets the number of collisions that occurred during the generation of the Hash Table
	pre: none
	post: none
	return: collisions
	*/
	int getCollisions() const;


	//void printHashTable();
};
