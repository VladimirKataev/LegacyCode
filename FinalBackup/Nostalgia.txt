/*	-----------REMNANTS OF YE OLDE AGES--------------------	
		String sndText;
		sndText = text;
		//------------ Input Parse and response code here
		int n = 0;
		boolean parsed = false;
		String id = "";
		String name = "";
		String request = "";
		while(text.charAt(n) != '.'){
			id += text.charAt(n++);
		}
		n++;
		if(id.equals("n")){
			System.out.println("we have new record");
			while(text.charAt(n) != ';'){
				name += text.charAt(n++);
			}

			dbc.add(new ClientRecord(dbc.size(),name));
			sndText = "S";
			return sndText;
		}
		int posList = Integer.parseInt(id);
		if(posList >= dbc.size()){sndText = "F";return sndText;}
		while(text.charAt(n) != '.' && text.charAt(n) != ';'){
			request += text.charAt(n++);
		}
		switch(request){
			case "Qon":
				dbc.get(posList).setQueue(true);
				dbq.add(posList);
				//MATCHMAKING
				for(int a = 0; a < dbq.size(); a++){
					for(int b = 0; b < a; b++){

					//	\/\/\/\/\/\/NEEDS INTENSIVE AF WORK \/\/\/\/\/\/\/\/\/\
						if(dbc.get(dbq.get(a)).getScore() == dbc.get(dbq.get(b)).getScore()){
							dbg.add(new GameBoard(dbc.get(dbq.get(a)), dbc.get(dbq.get(b))));
							dbc.get(dbq.get(a)).setQueue(false);
							dbc.get(dbq.get(b)).setQueue(false);
							dbc.get(dbq.get(a)).setGameNo(dbg.size()-1);
							dbc.get(dbq.get(b)).setGameNo(dbg.size()-1);

							System.out.println("Found game between "+dbc.get(dbq.get(a)).toString()+"\t"+dbc.get(dbq.get(b)).toString());
							dbq.remove(a);
							dbq.remove(b);

						}
					}
				}				
				
				break;
			case "Qoff":
				dbc.get(posList).setQueue(false);
				boolean f = false;
				int s = 0;
				while(!f || dbq.get(s) != posList){s++;};
				dbq.remove(s);
				break;
			case "serialise":
				sndText = dbc.get(posList).toString();
				return sndText;
			case "update":
				sndText = "";
				if(dbc.get(posList).getGameNo() != -1){
					sndText += "IG.";
					sndText += dbg.get(dbc.get(posList).getGameNo()).toString();
					return sndText;
				}
				if(dbc.get(posList).getQueue() == true){
					sndText += "none";		
				}

				return sndText;
			case "move":
				if(dbc.get(posList).getGameNo() == -1 ){sndText = "F"; return sndText;}
				String mv = "";
				if(sndText.charAt(n) == ';'){sndText = "F"; return sndText;}
				while(sndText.charAt(n) != ';'){
					n++;
					mv += sndText.charAt(n);
				}
				if(!dbg.get(dbc.get(posList).getGameNo()).moveAllowed(mv)){sndText = "F"; return sndText;}
				dbg.get(dbc.get(posList).getGameNo()).move(mv);
				if(dbg.get(dbc.get(posList).getGameNo()).isOver()){	// A GAME ENDED
					ClientRecord winner;
					ClientRecord loser;
					if(dbg.get(dbc.get(posList).getGameNo()).player1Won()){
						
					}

				}
				

		}
*/

/*		-------------------------REMNANTS OF CODE---------------------
			case "Move":
				if(parsePos >= sndText.length() || sndText.charAt(parsePos) == ';')
					{return "No move data given";}
				if(contact)
				parsePos++;
				while(sndText.charAt(parsePos) != '.' || sndText.charAt(parsePos) != ';')
					{data += sndText.charAt(parsePos++);}


*/


/////////////////////////////////////////////////CLIENT RENDERER//////////////////////////////////////////
	public void run(){
		initialize();
		while(true){
                        long time = System.currentTimeMillis(); 
                        
                        update(); 
                        draw(); 

                        time = (1000 / fps) - (System.currentTimeMillis() - time); 
                        if (time > 0) 
                        { 
                                try 
                                { 
                                        Thread.sleep(time); 
                                } 
                                catch(Exception e){} 
                        } 

		}
		
	}
        void initialize() 
        { 
                setTitle("Connect4"); 
                setSize(windowWidth, windowHeight); 
                setResizable(true); 
                setDefaultCloseOperation(EXIT_ON_CLOSE); 
                setVisible(true); 
		setFocusable(true);
		requestFocusInWindow();
		addMouseListener(this);                        
		insets = getInsets(); 
                setSize(insets.left + windowWidth + insets.right, 
                                insets.top + windowHeight + insets.bottom); 
                
                backBuffer = new BufferedImage(windowWidth, windowHeight, BufferedImage.TYPE_INT_RGB); 
		addMouseListener(this);        

	} 
	public void mouseClicked(MouseEvent e){}
	public void mousePressed(MouseEvent e){}
	public void mouseReleased(MouseEvent e){
		mx = e.getX();
		my = e.getY();
		//System.out.print("["+mx+ ":"+my+"]");
		//REQUEST CHANGE SHIT GOES HERE
	}
	public void mouseEntered(MouseEvent e){}
	public void mouseExited(MouseEvent e){}

        void draw() 
        {               
                Graphics g = getGraphics(); 
                
                Graphics bbg = backBuffer.getGraphics(); 
                
                bbg.setColor(Color.WHITE); 
                bbg.fillRect(0, 0, windowWidth, windowHeight);     
                bbg.setColor(Color.BLACK);
		bbg.drawString(name,10,50);
		bbg.drawString(Integer.toString(xp),10,75); 
                bbg.drawString(Integer.toString(id),10,100);
		bbg.drawRect(10,20,30,40);
		bbg.drawOval(10,10,20,20);
                g.drawImage(backBuffer, insets.left, insets.top, this); 
        } 

//---------------------------

		if(arg1.equals("c")){			//Check if legit, set id to arg2, set name to arg3
			parsePos++;
			while(sndText.charAt(parsePos) != '.' && parsePos < sndText.length())
				{req += sndText.charAt(parsePos++);}

			try			{id = Integer.parseInt(req);}
			catch(Exception e)	{System.out.println("brk1:"+req);return "false";}
			req = "";
	
			while(sndText.charAt(parsePos) != ';' && parsePos < sndText.length()-1)
				{req += sndText.charAt(parsePos++);}
			if(dbc.get(id).getName().equals(req))
				{return ("true");}
			return "false";
		}

